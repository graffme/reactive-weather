{"version":3,"sources":["components/WeatherTile/dates-variables.js","components/WeatherTile/WeatherTile.js","App.js","serviceWorker.js","index.js"],"names":["months","weekdays","WeatherTile","_ref","forecast","myDate","Date","date","getDate","month","getMonth","day","getDay","forecastItems","map","dailyForecast","index","react_default","a","createElement","className","key","weather","id","temp","toFixed","night","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","_fetchData","asyncToGenerator","regenerator_default","mark","_callee","url","res","data","wrap","_context","prev","next","fetch","sent","json","abrupt","stop","apply","arguments","_x","fetchData","then","setState","list","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4b45dc75.chunk.js","sourcesContent":["export const months = [\"Jan\", \"Feb\", \"Mar\",\n\"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sept\",\n\"Oct\", \"Nov\", \"Dec\"];\nexport const weekdays = [\"Sunday\",\"Monday\", \"Tuesday\", \"Wednesday\",\n\"Thursday\", \"Friday\", \"Saturday\"];\n","import React from 'react';\nimport './style.scss';\nimport {months, weekdays} from './dates-variables.js';\n\nexport default function WeatherTile({forecast}) {\n\n  const myDate = new Date();\n  const date = myDate.getDate();\n  const month = myDate.getMonth();\n  const day  = myDate.getDay();\n\n  const forecastItems = forecast.map((dailyForecast, index) =>\n    <div className=\"col text-center\" key={index}>\n      <div className=\"weather-tile\">\n        <p className=\"weather-date\">{weekdays[day+index] + \" \" + (date+index) + \" \" + months[month]}</p>\n\n        {dailyForecast.weather[0].id >= 200 && dailyForecast.weather[0].id < 300 ?\n          <i className=\"wi-storm-showers\"></i>\n        : null}\n\n        {dailyForecast.weather[0].id >= 300 && dailyForecast.weather[0].id < 600 ?\n          <i className=\"wi wi-rain\"></i>\n        : null}\n\n        {dailyForecast.weather[0].id >= 600 && dailyForecast.weather[0].id < 700 ?\n          <i className=\"wi wi-snow\"></i>\n        : null}\n\n        {dailyForecast.weather[0].id >= 700 && dailyForecast.weather[0].id < 800 ?\n          <i className=\"wi wi-fog\"></i>\n        : null}\n\n        {dailyForecast.weather[0].id === 800 ?\n          <i className=\"wi wi-day-sunny\"></i>\n        : null}\n\n        {dailyForecast.weather[0].id > 800 ?\n          <i className=\"wi wi-cloud\"></i>\n        : null}\n\n        <p className=\"temp\">{(dailyForecast.temp.day).toFixed(0)} °C</p>\n        <p className=\"temp temp-night\">{(dailyForecast.temp.night).toFixed(0)} °C</p>\n      </div>\n    </div>\n  );\n  return(\n    <div className=\"row\">\n      {forecastItems}\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport './App.scss';\n\nimport WeatherTile from './components/WeatherTile/WeatherTile.js';\n\n//GET YOUR OWN API KEY AND PASTE HERE\nconst API_KEY = \"abe5affb6861893994d8ed784c41108d\";\nconst api = \"https://api.openweathermap.org/data/2.5/forecast/daily?lat=52.4&lon=16.9&units=metric&cnt=5&appid=\" + API_KEY;\n//[52.4083, 16.9335]\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      weather: [],\n    };\n  }\n\n  componentDidMount() {\n    // fetch(api)\n    //   .then(response => response.json())\n    //   .then(data => {\n    //     const forecast = data.list;\n    //     this.setState({ weather: forecast });\n    //   });\n\n    async function fetchData(url) {\n      const res = await fetch(url);\n      const data = await res.json();\n      return data;\n    };\n\n    fetchData(api).then( data => {\n      this.setState({weather: data.list});\n    });\n  }\n\n  render() {\n    const {weather} = this.state;\n    return (\n      <div className=\"container main-container\">\n        <h1>5-days weather forecast</h1>\n        <p>This is a simple wather app, using OpenWeatherMap API to display 5-days forecast for Poznań, PL.</p>\n        <WeatherTile forecast={weather} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}