{"version":3,"sources":["components/WeatherTile/dates-variables.js","components/WeatherTile/helpers.js","components/WeatherTile/WeatherTile.js","config/geolocation.js","App.js","serviceWorker.js","index.js"],"names":["months","weekdays","calcDay","currentDay","index","weekdayNames","monthsNames","nextDay","Date","setDate","getDate","date","month","getMonth","day","getDay","concat","getIconClass","id","WeatherTile","_ref","forecast","today","forecastItems","map","dailyForecast","react_default","a","createElement","className","key","weather","temp","toFixed","night","geolocator","language","google","version","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","location","_this2","_fetchData","asyncToGenerator","regenerator_default","mark","_callee","url","res","data","wrap","_context","prev","next","fetch","sent","json","abrupt","stop","apply","arguments","Promise","resolve","reject","enableHighAccuracy","fallbackToIP","addressLookup","err","then","setState","console","log","latitude","coords","longitude","_x","fetchData","list","catch","_this$state","address","street","city","countryCode","Component","Boolean","window","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.52ecc353.chunk.js","sourcesContent":["export const months = [\"Jan\", \"Feb\", \"Mar\",\n\"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sept\",\n\"Oct\", \"Nov\", \"Dec\"];\nexport const weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\",\n\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n","export const calcDay = (currentDay, index, weekdayNames, monthsNames) => {\n  const nextDay = new Date();\n  nextDay.setDate(currentDay.getDate() + index);\n\n  const date = nextDay.getDate();\n  const month = nextDay.getMonth();\n  const day = nextDay.getDay();\n\n  return `${weekdayNames[day]} ${date} ${monthsNames[month]}`;\n};\n\nexport const getIconClass = (id) => {\n  switch(true) {\n    case (id >= 200 && id < 300):\n      return \"wi-storm-showers\";\n    case (id >= 300 && id < 600):\n      return \"wi-rain\";\n    case (id >= 600 && id < 700):\n      return \"wi-snow\";\n    case (id >= 700 && id < 800):\n      return \"wi-fog\";\n    case (id === 800):\n      return \"wi-day-sunny\";\n    case (id > 800):\n      return \"wi-cloud\";\n    default:\n      return \"\";\n  }\n}\n","import React from 'react';\nimport './style.scss';\nimport {months, weekdays} from './dates-variables.js';\nimport {calcDay, getIconClass} from './helpers.js';\n\nexport default function WeatherTile({forecast}) {\n\n  const today = new Date();\n\n  const forecastItems = forecast.map((dailyForecast, index) =>\n    <div className=\"col text-center\" key={index}>\n      <div className=\"weather-tile\">\n\n        <p className=\"weather-date\">{calcDay(today, index, weekdays, months)}</p>\n        <i className={`wi ${getIconClass(dailyForecast.weather[0].id)}`}></i>\n        <p className=\"temp\">{(dailyForecast.temp.day).toFixed(0)} °C</p>\n        <p className=\"temp temp-night\">{(dailyForecast.temp.night).toFixed(0)} °C</p>\n      </div>\n    </div>\n  );\n  return(\n    <div className=\"row\">\n      {forecastItems}\n    </div>\n  );\n}\n","import * as geolocator from 'geolocator';\n\ngeolocator.config({\n  language: \"en\",\n  google: {\n    version: \"3\",\n    key: \"AIzaSyAIlt92QJ4DNXvz1GrIfSYK5MfI37Z5pJs\"\n  }\n});\n\nexport const locateUser = () => {\n  return new Promise((resolve, reject) => {\n    const options = {\n      enableHighAccuracy: true,\n      fallbackToIP: true, // fallback to IP if Geolocation fails or rejected\n      addressLookup: true\n    };\n\n    geolocator.locate(options, function (err, location) {\n      return resolve(location);\n    });\n  });\n}\n","import React, { Component } from 'react';\nimport './App.scss';\n\nimport WeatherTile from './components/WeatherTile/WeatherTile.js';\nimport {locateUser} from './config/geolocation.js';\n\n//GET YOUR OWN API KEY AND PASTE HERE\nconst API_KEY = \"abe5affb6861893994d8ed784c41108d\";\n//[52.4083, 16.9335]\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      weather: [],\n      location: null,\n    };\n  }\n\n  componentDidMount() {\n    locateUser().then( data => {\n        this.setState({location: data});\n        console.log(this.state.location);\n      }).then( data => {\n        let latitude = this.state.location.coords.latitude;\n        let longitude = this.state.location.coords.longitude;\n        let api = `https://api.openweathermap.org/data/2.5/forecast/daily?lat=${latitude}&lon=${longitude}&units=metric&cnt=5&appid=` + API_KEY;\n        fetchData(api).then( data => {\n        console.log(data);\n        this.setState({weather: data.list});\n      }).catch( err => {\n        console.log(err);\n      })\n    });\n\n    async function fetchData(url) {\n      const res = await fetch(url);\n      const data = await res.json();\n      return data;\n    };\n  }\n\n  render() {\n    const {weather, location} = this.state;\n    return (\n      <div className=\"container main-container\">\n        <h1>5-days weather forecast</h1>\n        <p>This is a simple wather app, using OpenWeatherMap API to display 5-days forecast for {location !== null ? `${location.address.street}, ${location.address.city} ${location.address.countryCode}` : \"[waiting for location...]\" }</p>\n        {weather !== [] ? (\n          <WeatherTile forecast={weather} /> ) : null }\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}