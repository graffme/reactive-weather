{"version":3,"sources":["components/WeatherTile/WeatherTile.js","App.js","serviceWorker.js","index.js"],"names":["WeatherTile","props","months","weekdays","myDate","Date","date","getDate","month","getMonth","day","getDay","forecastItems","forecast","map","dailyForecast","index","react_default","a","createElement","className","key","weather","id","class","temp","night","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","fetch","then","response","json","data","list","console","log","setState","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gQAGe,SAASA,EAAYC,GAClC,IAAMC,EAAS,CAAC,MAAO,MAAO,MAC9B,MAAO,MAAO,OAAQ,OAAQ,MAAO,OACrC,MAAO,MAAO,OACRC,EAAW,CAAC,SAAS,SAAU,UAAW,YAChD,WAAY,SAAU,YAEhBC,EAAS,IAAIC,KACfC,EAAOF,EAAOG,UACdC,EAAQJ,EAAOK,WACfC,EAAON,EAAOO,SAEZC,EAAgBX,EAAMY,SAASC,IAAI,SAACC,EAAeC,GAAhB,OACvCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBC,IAAKL,GACpCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBjB,EAASO,EAAIM,GAAS,KAAOV,EAAKU,GAAS,IAAMd,EAAOM,IAEpFO,EAAcO,QAAQ,GAAGC,IAAM,KAAOR,EAAcO,QAAQ,GAAGC,GAAK,IACnEN,EAAAC,EAAAC,cAAA,KAAGK,MAAM,qBACT,KAEDT,EAAcO,QAAQ,GAAGC,IAAM,KAAOR,EAAcO,QAAQ,GAAGC,GAAK,IACnEN,EAAAC,EAAAC,cAAA,KAAGK,MAAM,YACT,KAEDT,EAAcO,QAAQ,GAAGC,IAAM,KAAOR,EAAcO,QAAQ,GAAGC,GAAK,IACnEN,EAAAC,EAAAC,cAAA,KAAGK,MAAM,eACT,KAEDT,EAAcO,QAAQ,GAAGC,IAAM,KAAOR,EAAcO,QAAQ,GAAGC,GAAK,IACnEN,EAAAC,EAAAC,cAAA,KAAGK,MAAM,cACT,KAE8B,KAA/BT,EAAcO,QAAQ,GAAGC,GACxBN,EAAAC,EAAAC,cAAA,KAAGK,MAAM,oBACT,KAEDT,EAAcO,QAAQ,GAAGC,GAAK,IAC7BN,EAAAC,EAAAC,cAAA,KAAGK,MAAM,gBACT,KAEFP,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAQL,EAAcU,KAAKf,IAAxC,UACAO,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAAmBL,EAAcU,KAAKC,MAAnD,cAIN,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZR,GC7CP,IAIqBe,cACnB,SAAAA,EAAY1B,GAAO,IAAA2B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM9B,KACDkC,MAAQ,CACXb,QAAS,IAHMM,mFAOC,IAAAQ,EAAAL,KAClBM,MAZQ,sIAaLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJ,IAAM5B,EAAW4B,EAAKC,KACtBC,QAAQC,IAAI/B,GACZuB,EAAKS,SAAS,CAAEvB,QAAST,uCAK7B,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACbH,EAAAC,EAAAC,cAAA,qCACAF,EAAAC,EAAAC,cAAA,8FACAF,EAAAC,EAAAC,cAACnB,EAAD,CAAaa,SAAUkB,KAAKI,MAAMb,kBAvBTwB,aCEbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.4343fc47.chunk.js","sourcesContent":["import React from 'react';\nimport './style.scss';\n\nexport default function WeatherTile(props) {\n  const months = [\"Jan\", \"Feb\", \"Mar\",\n  \"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sept\",\n  \"Oct\", \"Nov\", \"Dec\"];\n  const weekdays = [\"Sunday\",\"Monday\", \"Tuesday\", \"Wednesday\",\n  \"Thursday\", \"Friday\", \"Saturday\"];\n\n  const myDate = new Date();\n  var date = myDate.getDate();\n  var month = myDate.getMonth();\n  var day  = myDate.getDay();\n\n  const forecastItems = props.forecast.map((dailyForecast, index) =>\n    <div className=\"col text-center\" key={index}>\n      <div className=\"weather-tile\">\n        <p className=\"weather-date\">{weekdays[day+index] + \" \" + (date+index) + \" \" + months[month]}</p>\n\n        {dailyForecast.weather[0].id >= 200 && dailyForecast.weather[0].id < 300 ?\n          <i class=\"wi-storm-showers\"></i>\n        : null}\n\n        {dailyForecast.weather[0].id >= 300 && dailyForecast.weather[0].id < 600 ?\n          <i class=\"wi-rain\"></i>\n        : null}\n\n        {dailyForecast.weather[0].id >= 600 && dailyForecast.weather[0].id < 700 ?\n          <i class=\"wi wi-snow\"></i>\n        : null}\n\n        {dailyForecast.weather[0].id >= 700 && dailyForecast.weather[0].id < 800 ?\n          <i class=\"wi wi-fog\"></i>\n        : null}\n\n        {dailyForecast.weather[0].id == 800 ?\n          <i class=\"wi wi-day-sunny\"></i>\n        : null}\n\n        {dailyForecast.weather[0].id > 800 ?\n          <i class=\"wi wi-cloud\"></i>\n        : null}\n\n        <p className=\"temp\">{dailyForecast.temp.day} °C</p>\n        <p className=\"temp temp-night\">{dailyForecast.temp.night} °C</p>\n      </div>\n    </div>\n  );\n  return(\n    <div className=\"row\">\n      {forecastItems}\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport './App.scss';\n\nimport WeatherTile from './components/WeatherTile/WeatherTile.js';\n\n//GET YOUR OWN API KEY AND PASTE HERE\nconst API_KEY = \"abe5affb6861893994d8ed784c41108d\";\nconst api = \"https://api.openweathermap.org/data/2.5/forecast/daily?lat=52.4&lon=16.9&units=metric&cnt=5&appid=\" + API_KEY;\n//[52.4083, 16.9335]\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      weather: [],\n    };\n  }\n\n  componentDidMount() {\n    fetch(api)\n      .then(response => response.json())\n      .then(data => {\n        const forecast = data.list;\n        console.log(forecast);\n        this.setState({ weather: forecast })\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"container main-container\">\n        <h1>5-days weather forecast</h1>\n        <p>This is a simple wather app, using OpenWeatherMap API to display 5-days forecast.</p>\n        <WeatherTile forecast={this.state.weather} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}